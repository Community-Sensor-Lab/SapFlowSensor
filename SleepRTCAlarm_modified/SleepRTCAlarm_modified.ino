/*
  Sleep RTC Alarm for Arduino Zero
  Demonstrates the use an alarm to wake up an Arduino zero from Standby mode
  This example code is in the public domain

  http://arduino.cc/en/Tutorial/SleepRTCAlarm

  created by Arturo Guadalupi
  17 Nov 2015
  modified 
  01 Mar 2016
  
  NOTE:
  If you use this sketch with a MKR1000 you will see no output on the serial monitor.
  This happens because the USB clock is stopped so it the USB connection is stopped too.
  **To see again the USB port you have to double tap on the reset button!**
*/

#include <RTCZero.h>

#define T_SPAN_H 0   // the time between alarms in seconds
#define T_SPAN_M 0   // the time between alarms in seconds
#define T_SPAN_S 10  // the time between alarms in seconds

/* Create an rtc object */
RTCZero rtc;

uint8_t ss, mm, hh, d, m, yOff;
uint32_t year, month, day, hrs, mins, secs;

void setup() {
  Serial.begin(9600);
  delay(5000);
  Serial.println(__FILE__);

  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, LOW);

  rtc.begin();

  // set date and time from compiled date time
  // block out to keep microcontroller time
  //convertDateTime(__DATE__, __TIME__); rtc.setTime(hh, mm, ss+12); rtc.setDate(d, m, yOff);

  printDateTime();

  hrs = rtc.getHours() + T_SPAN_H;
  mins = rtc.getMinutes() + T_SPAN_M;
  secs = rtc.getSeconds() + T_SPAN_S;
  timeSpan(hrs, mins, secs);  // results in hrs, mins, secs,

  rtc.setAlarmTime(hrs, mins, secs);
  rtc.enableAlarm(rtc.MATCH_HHMMSS);

  rtc.attachInterrupt(alarmMatch);
}

void loop() {
  rtc.standbyMode();
}

void alarmMatch() {

  digitalWrite(LED_BUILTIN, HIGH);

  hrs = rtc.getHours() + T_SPAN_H;
  mins = rtc.getMinutes() + T_SPAN_M;
  secs = rtc.getSeconds() + T_SPAN_S;

  Serial.print("current datetime: ");
  printDateTime();
  timeSpan(hrs, mins, secs);  //, TIMESPAN);

  Serial.print("projected datetime: ");
  Serial.printf("%d/%d/%d %d:%d:%d\n",
                rtc.getYear(), rtc.getMonth(), rtc.getDay(),
                hrs, mins, secs);

  rtc.setAlarmTime(hrs, mins, secs);


  printDateTime();

  delay(2000);
  digitalWrite(LED_BUILTIN, LOW);
}

/**************************************************************************/
/*!
    @brief  gets the time in spanSecs seconds

    @param hrs, mins, secs addresses of long ints with the time to calculate
    timeSpan from, which can be the current time. Results will pe put in the 
    same variables
*/
/**************************************************************************/
void timeSpan(uint32_t &hrs, uint32_t &mins, uint32_t &secs) {  //}, uint32_t spanSecs) {

  uint32_t ts = secs;  // + spanSecs;
  secs = ts % 60;
  uint32_t tm = mins + ts / 60;
  mins = tm % 60;
  uint32_t th = hrs + tm / 60;
  hrs = th;
}

/**************************************************************************/
/*!
    @brief  Convert a string containing two digits to uint8_t, e.g. "09" returns 9
    @param p Pointer to a string containing two digits
*/
/**************************************************************************/
static uint8_t conv2d(const char *p) {
  uint8_t v = 0;
  if ('0' <= *p && *p <= '9')
    v = *p - '0';
  return 10 * v + *++p - '0';
}

/**************************************************************************/
/*!
    @brief  Constructor for generating the build time.

    This constructor expects its parameters to be strings in the format
    generated by the compiler's preprocessor macros `__DATE__` and
    `__TIME__`. Usage:

    ```
    setDateTime(__DATE__, __TIME__);
    ```

    @note The `F()` macro can be used to reduce the RAM footprint, see
        the next constructor.

    @param date Date string, e.g. "Apr 16 2020".
    @param time Time string, e.g. "18:34:56".
*/
/**************************************************************************/
void convertDateTime(const char *date, const char *time) {

  yOff = conv2d(date + 9);
  // Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
  switch (date[0]) {
    case 'J':
      m = (date[1] == 'a') ? 1 : ((date[2] == 'n') ? 6 : 7);
      break;
    case 'F':
      m = 2;
      break;
    case 'A':
      m = date[2] == 'r' ? 4 : 8;
      break;
    case 'M':
      m = date[2] == 'r' ? 3 : 5;
      break;
    case 'S':
      m = 9;
      break;
    case 'O':
      m = 10;
      break;
    case 'N':
      m = 11;
      break;
    case 'D':
      m = 12;
      break;
  }
  d = conv2d(date + 4);
  hh = conv2d(time);
  mm = conv2d(time + 3);
  ss = conv2d(time + 6);
}

void printDateTime() {
  // year = rtc.getYear();
  // month = rtc.getMonth();
  // day = rtc.getDay();
  // hrs = rtc.getHours();
  // mins = rtc.getMinutes();
  // secs = rtc.getSeconds();
  Serial.printf("%d/%d/%d %d:%d:%d\n", rtc.getYear(), rtc.getMonth(), rtc.getDay(),
                rtc.getHours(), rtc.getMinutes(), rtc.getSeconds());
}